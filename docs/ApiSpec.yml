openapi: 3.0.0
info:
  description: "This is API Spec for Bilo"
  version: "1.0.0"
  title: "Wanderer"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: galihp83@gmail.com

paths:
  /login:
    post:
      tags:
        - Auth
      summary: "Login"
      requestBody:
        $ref: "#/components/requestBodies/login"
      responses:
        "200":
          $ref: "#/components/responses/login_200"
        "400":
          $ref: "#/components/responses/login_400"
        "404":
          $ref: "#/components/responses/login_404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"
  /register:
    post:
      tags:
        - Auth
      summary: "Register"
      requestBody:
        $ref: "#/components/requestBodies/register"
      responses:
        "201":
          $ref: "#/components/responses/register_201"
        "400":
          $ref: "#/components/responses/register_400"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "409":
          $ref: "#/components/responses/register_409"
        "500":
          $ref: "#/components/responses/500"

  /products:
    post:
      tags:
        - Product
      summary: "Insert new product"
      requestBody:
        $ref: "#/components/requestBodies/product"
      responses:
        "201":
          $ref: "#/components/responses/product_201"
        "400":
          $ref: "#/components/responses/product_400"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "409":
          $ref: "#/components/responses/product_409"
        "500":
          $ref: "#/components/responses/500"
components:
  schemas:
    user:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        image:
          type: string
          format: binary
        token:
          type: string
    
    products:
      type: object
      properties:
        product_id:
          type: integer
        name:
          type: string
        price:
          type: number
          format: currency
        stock:
          type: integer
        condition:
          type: string
        description:
          type: string
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
        picture:
          type: array
          items:
            type: string
            format: binary
        user:
          $ref: "#/components/schemas/user"
    
    apiResponse:
      type: object
      properties:
        message:
          type: string
          nullable: true
        pagination:
          type: object
          nullable: true
        data:
          oneOf:
            - type: array
              items:
                type: object
                nullable: true
                oneOf:
                  - $ref: "#/components/schemas/user"
            - type: object
              nullable: true
              oneOf:
                - $ref: "#/components/schemas/user"

  responses:
    "400":
      description: "bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          example:
            message: "bad request"
    "401":
      description: "unauthorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          examples:
            "unauthorized":
              value:
                message: "please login before access it"
            "incorrect token":
              value:
                message: "missing or malformed jwt"
    "404":
      description: "not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          example:
            message: "not found"
    "405":
      description: "method not allowed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          example:
            message: "method not allowed"
    "409":
      description: "conflict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          example:
            message: "conflict"
    "500":
      description: "internal server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          example:
            message: "internal server error"

    "login_200":
      description: "login success"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          example:
            message: "login success"
            data:
              user_id: 1
              name: "Galih Prayoga"
              image: "https://placehold.co/400x400/webp"
              role: "admin"
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    "login_400":
      description: "bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          examples:
            "default":
              value:
                message: "bad request"
            "no input":
              value:
                message: "please fill input correctly"
            "invalid email":
              value:
                message: "please fill email correctly"
            "invalid password":
              value:
                message: "please fill password correctly"
    "login_404":
      description: "not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          examples:
            "default":
              value:
                message: "not found"
            "user not found":
              value:
                message: "user not found"
            "wrong password":
              value:
                message: "wrong password"

    "register_201":
      description: "register success"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          example:
            message: "register success"
    "register_400":
      description: "bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          examples:
            "default":
              value:
                message: "bad request"
            "no input":
              value:
                message: "please fill input correctly"
            "invalid name":
              value:
                message: "please fill name correctly"
            "invalid phone":
              value:
                message: "please fill phone correctly"
            "invalid email":
              value:
                message: "please fill email correctly"
            "invalid password":
              value:
                message: "please fill password correctly"
    "register_409":
      description: "conflict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          examples:
            "email in use":
              value:
                message: "email is already in use"

    "product_201":
      description: "create product success"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          example:
            message: "create product success"
    "product_400":
      description: "bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          examples:
            "default":
              value:
                message: "bad request"
            "no input":
              value:
                message: "please fill input correctly"
            "invalid name":
              value:
                message: "please fill name correctly"
            "invalid price":
              value:
                message: "please fill price correctly"
            "invalid stock":
              value:
                message: "please fill stock correctly"
            "invalid condition":
              value:
                message: "please fill condition correctly"
            "invalid description":
              value:
                message: "please fill description correctly"
    "product_409":
      description: "conflict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResponse"
          examples:
            "duplicate product":
              value:
                message: "the product is already in the database"

  requestBodies:
    login:
      content:
        application/json:
          schema:
            type: object
            required:
              - "email"
              - "password"
            properties:
              email:
                type: string 
                example: "galih@gmail.com"
              password:
                type: string
                example: "galih123"
    register:
      content:
        application/json:
          schema:
            type: object
            required:
              - "name"
              - "phone"
              - "email"
              - "password"
            properties:
              name:
                type: string 
                example: "Galih Prayoga"
              phone:
                type: string 
                example: "081229081229"
              email:
                type: string 
                example: "galih@gmail.com"
              password:
                type: string
                example: "galih123"

    product:
      content:
        application/json:
          schema:
            type: object
            required:
              - "name"
              - "price"
              - "stock"
              - "condition"
              - "description"
            properties:
              name:
                type: string 
                example: "Keyboard"
              price:
                type: number 
                example: 300000
              stock:
                type: integer
                example: 10
              condition:
                type: string
                example: "New"
              description:
                type: string
                example: "This is new mechanical keyboard model."